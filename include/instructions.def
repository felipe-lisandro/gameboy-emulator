// 1. NOP / STOP / Misc
X(0x00, "NOP", 1, instr_NOP, REG_NONE)
X(0x10, "STOP", 1, instr_NOP, REG_NONE)
X(0x07, "RLCA", 1, instr_RLCA, REG_NONE)
X(0x17, "RLA", 1, instr_RLCA, REG_NONE)
X(0x0F, "RRCA", 1, instr_RRCA, REG_NONE)
X(0x1F, "RRA", 1, instr_RRCA, REG_NONE)
X(0x2F, "CPL", 1, instr_CPL, REG_NONE)

// 2. LD r, d8 (load immediate 8-bit into register)
X(0x06, "LD B, d8", 2, instr_LD_8_U8, REG_B)
X(0x0E, "LD C, d8", 2, instr_LD_8_U8, REG_C)
X(0x16, "LD D, d8", 2, instr_LD_8_U8, REG_D)
X(0x1E, "LD E, d8", 2, instr_LD_8_U8, REG_E)
X(0x26, "LD H, d8", 2, instr_LD_8_U8, REG_H)
X(0x2E, "LD L, d8", 2, instr_LD_8_U8, REG_L)

// 3. LD r1, r2 (load register to register)
X(0x78, "LD A,B", 1, instr_LD_A_8, REG_B)
X(0x79, "LD A,C", 1, instr_LD_A_8, REG_C)
X(0x7A, "LD A,D", 1, instr_LD_A_8, REG_D)
X(0x7B, "LD A,E", 1, instr_LD_A_8, REG_E)
X(0x7C, "LD A,H", 1, instr_LD_A_8, REG_H)
X(0x7D, "LD A,L", 1, instr_LD_A_8, REG_L)

X(0x47, "LD B,A", 1, instr_LD_B_8, REG_A)

X(0x48, "LD C,B", 1, instr_LD_C_8, REG_B)
X(0x49, "LD C,C", 1, instr_LD_C_8, REG_C)
X(0x4A, "LD C,D", 1, instr_LD_C_8, REG_D)
X(0x4B, "LD C,E", 1, instr_LD_C_8, REG_E)
X(0x4C, "LD C,H", 1, instr_LD_C_8, REG_H)
X(0x4D, "LD C,L", 1, instr_LD_C_8, REG_L)

X(0x50, "LD D,B", 1, instr_LD_D_8, REG_B)
X(0x51, "LD D,C", 1, instr_LD_D_8, REG_C)
X(0x52, "LD D,D", 1, instr_LD_D_8, REG_D)
X(0x53, "LD D,E", 1, instr_LD_D_8, REG_E)
X(0x54, "LD D,H", 1, instr_LD_D_8, REG_H)
X(0x55, "LD D,L", 1, instr_LD_D_8, REG_L)

X(0x58, "LD E,B", 1, instr_LD_E_8, REG_B)
X(0x59, "LD E,C", 1, instr_LD_E_8, REG_C)
X(0x5A, "LD E,D", 1, instr_LD_E_8, REG_D)
X(0x5B, "LD E,E", 1, instr_LD_E_8, REG_E)
X(0x5C, "LD E,H", 1, instr_LD_E_8, REG_H)
X(0x5D, "LD E,L", 1, instr_LD_E_8, REG_L)

X(0x60, "LD H,B", 1, instr_LD_H_8, REG_B)
X(0x61, "LD H,C", 1, instr_LD_H_8, REG_C)
X(0x62, "LD H,D", 1, instr_LD_H_8, REG_D)
X(0x63, "LD H,E", 1, instr_LD_H_8, REG_E)
X(0x64, "LD H,H", 1, instr_LD_H_8, REG_H)
X(0x65, "LD H,L", 1, instr_LD_H_8, REG_L)

X(0x68, "LD L,B", 1, instr_LD_L_8, REG_B)
X(0x69, "LD L,C", 1, instr_LD_L_8, REG_C)
X(0x6A, "LD L,D", 1, instr_LD_L_8, REG_D)
X(0x6B, "LD L,E", 1, instr_LD_L_8, REG_E)
X(0x6C, "LD L,H", 1, instr_LD_L_8, REG_H)
X(0x6D, "LD L,L", 1, instr_LD_L_8, REG_L)

// 4. INC / DEC 8-bit registers
X(0x04, "INC B", 1, instr_INC_8, REG_B)
X(0x05, "DEC B", 1, instr_DEC_8, REG_B)
X(0x0C, "INC C", 1, instr_INC_8, REG_C)
X(0x0D, "DEC C", 1, instr_DEC_8, REG_C)
X(0x14, "INC D", 1, instr_INC_8, REG_D)
X(0x15, "DEC D", 1, instr_DEC_8, REG_D)
X(0x1C, "INC E", 1, instr_INC_8, REG_E)
X(0x1D, "DEC E", 1, instr_DEC_8, REG_E)
X(0x24, "INC H", 1, instr_INC_8, REG_H)
X(0x25, "DEC H", 1, instr_DEC_8, REG_H)
X(0x2C, "INC L", 1, instr_INC_8, REG_L)
X(0x2D, "DEC L", 1, instr_DEC_8, REG_L)

// 5. 16-bit load / arithmetic / memory instructions
X(0x01, "LD BC, d16", 3, instr_LD_BC_d16, REG_NONE)
X(0x11, "LD DE, d16", 3, instr_LD_DE_d16, REG_NONE)
X(0x21, "LD HL,d16", 3, instr_LD_HL_d16, REG_NONE)
X(0x02, "LD (BC), A", 2, instr_LD_BC_A, REG_NONE)
X(0x12, "LD (DE), A", 2, instr_LD_DE_A, REG_NONE)
X(0x0A, "LD A, (BC)", 2, instr_LD_A_BC, REG_NONE)
X(0x1A, "LD A, (DE)", 2, instr_LD_A_DE, REG_NONE)
X(0x22, "LD (HL+), A", 2, instr_LD_HLp_A, REG_NONE)
X(0x2A, "LD A, (HL+)", 2, instr_LD_A_HLp, REG_NONE)
X(0x03, "INC BC", 2, instr_INC_BC, REG_NONE)
X(0x0B, "DEC BC", 2, instr_DEC_BC, REG_NONE)
X(0x13, "INC DE", 2, instr_INC_DE, REG_NONE)
X(0x1B, "DEC DE", 2, instr_DEC_DE, REG_NONE)
X(0x23, "INC HL", 2, instr_INC_HL, REG_NONE)
X(0x2B, "DEC HL", 2, instr_DEC_HL, REG_NONE)
X(0x08, "LD (a16), SP", 5, instr_LD_a16_SP, REG_NONE)
X(0x09, "ADD HL, BC", 2, instr_ADD_HL_BC, REG_NONE)
X(0x19, "ADD HL, DE", 2, instr_ADD_HL_DE, REG_NONE)
X(0x29, "ADD HL, HL", 2, instr_ADD_HL_HL, REG_NONE)

// 6. JR / conditional jumps
X(0x18, "JR r8", 3, instr_JR_r8, REG_NONE)
X(0x20, "JR NZ,r8", 3, instr_JR_NZ_r8, REG_NONE)
X(0x28, "JR Z,r8", 3, instr_JR_Z_r8, REG_NONE)
